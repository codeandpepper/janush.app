import { Stack, StackProps } from "aws-cdk-lib";
import { Construct } from "constructs";

import { EnvName } from "../enums/EnvName";
import { CognitoCdkConstruct } from "./authentication/cognitoCdkConstruct";
import { AppSyncCdkConstruct } from "./api/appSyncCdkConstruct";
import { CreateUserGroupCdkConstruct } from "./usersManagement/createUserGroup/createUserGroupCdkConstruct";
import { GetUserGroupsCdkConstruct } from "./usersManagement/getUserGroups/getUserGroupsCdkConstruct";

interface SingleEnvironmentProps {
  envName: EnvName;
}

export class JanushAutoGeneratedAppStack extends Stack {
  constructor(
    scope: Construct,
    id: string,
    { envName, ...stackProps }: StackProps & SingleEnvironmentProps
  ) {
    super(scope, id, stackProps);

    // The code that defines your stack goes here

    // ========================================================================
    // Authentication: Amazon Cognito
    // ========================================================================

    const { cognitoUserPool: userPool } = new CognitoCdkConstruct(
      this,
      `${envName}-CognitoUserPool`,
      {
        envName,
      }
    );
    // ========================================================================
    // API: AppSync
    // ========================================================================

    const { graphQlApi } = new AppSyncCdkConstruct(
      this,
      `${envName}-AppSyncApi`,
      {
        envName,
        userPool,
      }
    );
    new CreateUserGroupCdkConstruct(this, `${envName}-cognitoCreateGroup`, {
      envName,
      userPool: userPool,
      graphQlApi: graphQlApi,
    });
    new GetUserGroupsCdkConstruct(this, `${envName}-cognitoListGroups`, {
      envName,
      userPool,
      graphQlApi: graphQlApi,
    });
  }
}
